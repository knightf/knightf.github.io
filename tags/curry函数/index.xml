<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Curry函数 on 韩飞的博客</title>
    <link>https://knightf.coding.me/tags/curry%E5%87%BD%E6%95%B0/index.xml</link>
    <description>Recent content in Curry函数 on 韩飞的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <atom:link href="https://knightf.coding.me/tags/curry%E5%87%BD%E6%95%B0/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JavaScript函数式开发概念：Curry代码</title>
      <link>https://knightf.coding.me/post/functional-javascript-concepts-currying/</link>
      <pubDate>Mon, 13 Jun 2016 18:39:15 +0800</pubDate>
      
      <guid>https://knightf.coding.me/post/functional-javascript-concepts-currying/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://blog.simpleblend.net/functional-javascript-concepts-currying/&#34;&gt;阅读原文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在我搞懂Curry代码之前，听到别的程序员说起它我总是很紧张。每次他们一讲这个就好像一块不详的雷雨云袭来，感觉这个概念很难懂。但我可以向你保证程序圈里的Curry，一点都不难懂，而且很简单就可以掌握，打开了通向强大的函数式编程大门。&lt;/p&gt;

&lt;h1 id=&#34;核心概念&#34;&gt;核心概念&lt;/h1&gt;

&lt;p&gt;我们先来看看&lt;a href=&#34;https://twitter.com/drboolean&#34;&gt;Brian Lonsdorf&lt;/a&gt;写的一本很棒的书：&lt;a href=&#34;https://drboolean.gitbooks.io/mostly-adequate-guide/content/&#34;&gt;Mostly Adequate Guide to Functional Programming&lt;/a&gt;里面是怎么说的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;概念很简单：你可以用比一个函数所需要的形参数量更少的形参来调用它。它会返回一个函数，接收剩下的形参。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;换言之，一个curry函数随着时间变化接收并提供额外的形参。它通过返回另一个函数来实现这个功能。为了看看这是怎么实现的，我们来把一个函数curry化。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var add = function(x, y) {
  return x + y;
}

add(10, 20); // 30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们又一个叫 &lt;code&gt;sum&lt;/code&gt; 的函数可以把两个数字加起来。简单。我们curry一下它。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var add = function(x) {
  return function(y) {
    return x + y;
  }
}

var addFifty = add(50);

addFifty(10); // 60
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们返回了一个变量 &lt;code&gt;x&lt;/code&gt; 的闭包函数，并没有直接返回结果。这样可以让我们在之后执行 &lt;code&gt;addFifty&lt;/code&gt; 的时候依然可以有对 &lt;code&gt;x&lt;/code&gt; 的引用。最后我们得到的这个函数给我们算了两个数字的和。我们可以说这个例子里面的函数就是curry化的了。&lt;/p&gt;

&lt;h1 id=&#34;为什么curry化&#34;&gt;为什么Curry化？&lt;/h1&gt;

&lt;p&gt;Curry函数在很多意义上都有帮助。从函数式编程的角度来看，它可以让你的程序用上更多的纯函数。我之后会写更多有关纯函数的文章但现在简单地说，纯函数会让你的程序更好的被你和你的同事看懂。&lt;/p&gt;

&lt;p&gt;另一个原因可以用这个更贴切一点的例子说明。虽然两个数相加可以很好地解释概念，但是不能突出它在更大的应用中带来的好处。现在我们就来看看。&lt;/p&gt;

&lt;p&gt;假设我们正在处理下面这个有关动物的列表：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const animals = [
  {
    id: 1,
    name: &amp;quot;Tails&amp;quot;,
    type: &amp;quot;Cat&amp;quot;,
    adoptable: false
  },
  {
    id: 2,
    name: &amp;quot;Soul&amp;quot;,
    type: &amp;quot;Cat&amp;quot;,
    adoptable: true
  },
  {
    id: 3,
    name: &amp;quot;Fred&amp;quot;,
    type: &amp;quot;Dog&amp;quot;,
    adoptable: true
  },
  {
    id: 4,
    name: &amp;quot;Fury&amp;quot;,
    type: &amp;quot;Lion&amp;quot;,
    adoptable: true
  }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们需要一个方法来基于 &lt;code&gt;type&lt;/code&gt; 过滤掉不需要的动物。我们可以这么写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;animals.filter(animal =&amp;gt;
   animal.type === &amp;quot;Cat&amp;quot;;
);

/*
[{
   adoptable: false,
   id: 1,
   name: &amp;quot;Tails&amp;quot;,
   type: &amp;quot;Cat&amp;quot;
 },
 {
   adoptable: true,
   id: 2,
   name: &amp;quot;Soul&amp;quot;,
   type: &amp;quot;Cat&amp;quot;
 }];
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看着不错，这样我们就把所有猫都找到了。但达到同样的目的可以有一种更好的写法。&lt;/p&gt;

&lt;p&gt;上面代码中最大的劣势就是 &lt;code&gt;type&lt;/code&gt; 这个动物的属性被紧密的与 &lt;em&gt;过滤这个行为&lt;/em&gt; 绑定到了一起。这样降低了重用性，而且助长了我们最糟糕的敌人——状态——的气焰。&lt;/p&gt;

&lt;p&gt;我们来看看能不能写得更好一点：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const isAnimal = 
   type =&amp;gt; 
     animal =&amp;gt;
       animal.type === type;

animals.filter(isAnimal(&amp;quot;Cat&amp;quot;));
 
/*
 [{
   adoptable: false,
   id: 1,
   name: &amp;quot;Tails&amp;quot;,
   type: &amp;quot;Cat&amp;quot;
 },
 {
   adoptable: true,
   id: 2,
   name: &amp;quot;Soul&amp;quot;,
   type: &amp;quot;Cat&amp;quot;
 }];
 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简洁多了。我们一步步看：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;isAnimal&lt;/code&gt; 接收一个形参，类型&lt;/li&gt;
&lt;li&gt;然后 &lt;code&gt;isAnimal&lt;/code&gt; 返回一个新的函数&lt;/li&gt;
&lt;li&gt;返回的函数用来做 &lt;code&gt;.filter()&lt;/code&gt; 函数的回调&lt;/li&gt;
&lt;li&gt;闭包让我们返回的新函数可以访问 &lt;code&gt;type&lt;/code&gt; 变量，最后让我们可以执行比较语句&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那么为什么它比上一个例子好呢？当应用越来越大的时候，就更难理解函数都是作什么的，他们从哪儿来。尽量多写纯函数可以杜绝对状态的追溯，而且让我们的整个应用能更好地分成单独的部分测试。&lt;/p&gt;

&lt;h1 id=&#34;结论-资源&#34;&gt;结论&amp;amp;资源&lt;/h1&gt;

&lt;p&gt;我希望这篇文章可以让你看到curry函数背后强大的原理。我个人认为他们非常有用，并且让我学习了更多的有关函数式编程的理念。&lt;/p&gt;

&lt;p&gt;如果你想要阅读更多有关的内容，我建议你可以看看这些函数式库，像是&lt;a href=&#34;http://ramdajs.com/0.21.0/docs/#curry&#34;&gt;Ramda.js&lt;/a&gt;和&lt;a href=&#34;https://lodash.com/docs#curry&#34;&gt;lodash&lt;/a&gt;，这些库里有广义上的curry函数可以让我们得到激动人心的函数式功能。&lt;/p&gt;

&lt;p&gt;最后，祝您身体健康！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
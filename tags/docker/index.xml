<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on 韩飞的博客</title>
    <link>https://knightf.coding.me/tags/docker/index.xml</link>
    <description>Recent content in Docker on 韩飞的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <atom:link href="https://knightf.coding.me/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>通过构建一个微型服务学习Docker</title>
      <link>https://knightf.coding.me/post/learn-docker-by-building-a-microservice/</link>
      <pubDate>Mon, 06 Jun 2016 14:43:42 +0800</pubDate>
      
      <guid>https://knightf.coding.me/post/learn-docker-by-building-a-microservice/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.dwmkerr.com/learn-docker-by-building-a-microservice/&#34;&gt;阅读原文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果你想要染指Docker，那看这篇就好了！&lt;/p&gt;

&lt;p&gt;在这篇文章中我会向你展示Docker是怎么工作的，它究竟是什么，还有它是怎么帮助我们完成构建一个微型服务这种基础开发任务的。&lt;/p&gt;

&lt;p&gt;在例子里我们将会用Node.js服务搭配MySQL后台的配置，从运行本地代码到生成运行服务和数据库的容器。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://knightf.coding.me/images/learn-docker-by-building-a-microservice-pic1.png&#34; alt=&#34;示意图&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;什么是docker&#34;&gt;什么是Docker?&lt;/h2&gt;

&lt;p&gt;本质上来说，Docker是一个让你可以创建映像(和虚拟机的很相似)并且在一个容器里运行这个映像的示例。&lt;/p&gt;

&lt;p&gt;Dock维护着一个很大的映像库叫&lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;。你可以从里面找你想用的映像或者存储你自己的映像。你可以装好Dock，选一个想用的映像然后在一个容器里运行它的实例。&lt;/p&gt;

&lt;p&gt;我们接下来就要先构建映像，然后根据映像创建容器，和更多精彩内容。&lt;/p&gt;

&lt;h3 id=&#34;安装docker&#34;&gt;安装Docker&lt;/h3&gt;

&lt;p&gt;要跟着做，你得装Docker。&lt;/p&gt;

&lt;p&gt;查看对应你系统的安装指南：&lt;a href=&#34;http://docs.docker.com/engine/installation&#34;&gt;http://docs.docker.com/engine/installation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;如果你是用的苹果机或者PC，那就用虚拟机。我在OS X系统下面用Parallels运行Ubuntu虚拟机应对大多数的开发任务。这样可以拍快照，回滚到出错之前的版本等等，在踩坑的时候非常有用。&lt;/p&gt;

&lt;h3 id=&#34;试一试&#34;&gt;试一试&lt;/h3&gt;

&lt;p&gt;键入这个命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -it ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等菊花转一会儿之后，你就能看见类似这样的提示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@719059da250d:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再试试别的命令然后退出这个容器：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@719059da250d:/# lsb_release -a
No LSB modules are available.  
Distributor ID:    Ubuntu  
Description:    Ubuntu 14.04.4 LTS  
Release:    14.04  
Codename:    trusty
root@719059da250d:/# exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看上去没什么了不起，但发生了很多事！&lt;/p&gt;

&lt;p&gt;你看到的是在你机器上_独立的_运行着Ubuntu的一个容器的脚本shell。这个容器是你发送指令的地方：你可以在上面装东西，运行软件，干想干的任何事。&lt;/p&gt;

&lt;p&gt;这是个从Docker文档&lt;a href=&#34;https://docs.docker.com/v1.8/introduction/understanding-docker/&#34;&gt;理解架构&lt;/a&gt;里面摘出来的一个很棒的示意图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://knightf.coding.me/images/learn-docker-by-building-a-microservice-pic2.png&#34; alt=&#34;示意图&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;我们敲了一个命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt;: 运行Docker客户端&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run&lt;/code&gt;: 运行新容器的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-it&lt;/code&gt;: 让容器给出一个交互终端的参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ubuntu&lt;/code&gt;: 容器使用的映像&lt;/li&gt;
&lt;li&gt;宿主机器(就是我们自己的电脑)上运行的Docker服务检查我们本地有没有映像的拷贝，然后发现并没有。&lt;/li&gt;
&lt;li&gt;Docker服务开始检查公共注册表(Docker hub)里有没有叫&lt;code&gt;ubuntu&lt;/code&gt;的这个映像，结果是有的。&lt;/li&gt;
&lt;li&gt;Docker服务开始下载这个映像然后存在本地的缓存区里(为了下次使用)。&lt;/li&gt;
&lt;li&gt;Docker服务基于这个&lt;code&gt;ubuntu&lt;/code&gt;映像创建了一个新的容器。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;试试下面这些命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -it haskell
docker run -it java
docker run -it python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们今天用不上&lt;strong&gt;Haskell&lt;/strong&gt;，但是你可以发现要运行任何环境都是很简单的。&lt;/p&gt;

&lt;p&gt;构建你自己的映像花不了多长时间，而且里面运行着我们的应用，服务和数据库，所有我们用的东西。然后我们就可以在任何装了Docker的计算机上运行它，并且是以一种一致的，可预测的方式运行。边写代码，我们可以一边构建我们的软件和它运行所依赖的环境并且简单的部署它们。&lt;/p&gt;

&lt;p&gt;我们来看看这个简单的微型服务的例子。&lt;/p&gt;

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;我们要搭建一个用到Node.js和MySQL的微型服务，在这个服务里我们可以管理一个包含邮件地址和电话号码的目录。&lt;/p&gt;

&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;

&lt;p&gt;为了本地开发我们需要安装MySQL并且建立一个测试数据库以便……&lt;/p&gt;

&lt;p&gt;……不。&lt;/p&gt;

&lt;p&gt;创建一个本地的数据库并且在上面跑脚本起初很简单，但是可能会变得很混乱。有很多不可控的因素。这么做也许能行，我们甚至可以在repo里面添加起控制作用的shell脚本，但如果其它开发者已经装了MySQL呢？如果他们已经有了一个叫做&amp;rsquo;users&amp;rsquo;的数据库正是我们要创建的呢？&lt;/p&gt;

&lt;h2 id=&#34;第一步-在docker中创建一个测试数据库服务器&#34;&gt;第一步：在Docker中创建一个测试数据库服务器&lt;/h2&gt;

&lt;p&gt;这是一个绝佳的Docker使用场景。也许在生产环境下我们并不想在Docker里面运行数据库(比如我们可能会用Amazon RDS)，但是不用花很长时间，我们就可以为开发而创建一个Docker容器，里面是一个干净的MySQL数据库。这样我们的开发环境就是纯净的，而且我们做的操作都是可控的，可重现的。&lt;/p&gt;

&lt;p&gt;执行下面的语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --name db -e MYSQL_ROOT_PASSWORD=123 -p 3306:3306 mysql:latest  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会运行一个MySQL实例，允许3306端口的访问，root密码是123。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt;告诉Docker我们想要运行一个映像，名字是最后的那个参数，&lt;strong&gt;mysql:vlatest&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--name db&lt;/code&gt;将这个容器命名为&lt;code&gt;db&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;分离，就是让这个实例在后台运行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e MYSQL_ROOT_PASSWORD=123&lt;/code&gt;这里面的&lt;code&gt;-e&lt;/code&gt;是标示出我们想要给定环境变量。后面跟着的变量就是这个MySQL映像会检查并设置的默认root密码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p 3306:3306&lt;/code&gt;告诉Docker我们要把容器内部的3306端口映射到外部的3306端口。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后的部分非常关键，尽管3306是MySQL的默认端口，但我们不告诉Docker我们要映射的话，它是会阻断我们通过那个端口通信的(因为容器如果你不指定的访问方式的话是独立的)。&lt;/p&gt;

&lt;p&gt;这个语句返回的是_容器id_，一个让你可以停止、重启、输入命令、干各种事情的引用名。我们来看看都有哪些容器在运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker ps
CONTAINER ID  IMAGE            ...    NAMES
36e68b966fd0  mysql:latest     ...    db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;真正有用的是容器ID，映像和名字。我们来连接到这个映像看看都有些什么：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker exec -it db /bin/bash

root@36e68b966fd0:/# mysql -uroot -p123  
mysql&amp;gt; show databases;  
+--------------------+
| Database           |
+--------------------+
| information_schema |
+--------------------+
1 rows in set (0.01 sec)

mysql&amp;gt; exit  
Bye  
root@36e68b966fd0:/# exit  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这么做聪明在哪呢：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker exec -it db&lt;/code&gt;告诉Docker我们想要在名字叫做&lt;code&gt;db&lt;/code&gt;的容器上执行一个命令(我们可以用id，或者id开头的几个字符)。&lt;code&gt;-it&lt;/code&gt;确保我们可以用终端。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql -uroot -p123&lt;/code&gt;这条命令就是我们在容器里执行的命令，打开一个mysql客户端。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们可以创建数据库，表，用户和我们需要的一切。&lt;/p&gt;

&lt;h3 id=&#34;完成测试数据库&#34;&gt;完成测试数据库&lt;/h3&gt;

&lt;p&gt;在一个容器里运行MySQL已经给我们展示了一些Docker的技巧，但是我们在这里先把注意力转移到完成我们的服务上。现在我们创建一个&lt;code&gt;test-database&lt;/code&gt;文件夹，里面放上开始、关闭数据库和设置测试数据的脚本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test-database\setup.sql
test-database\start.sh
test-database\stop.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开始很简单：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

# Run the MySQL container, with a database named &#39;users&#39; and credentials
# for a users-service user which can access it.
echo &amp;quot;Starting DB...&amp;quot;  
docker run --name db -d \  
  -e MYSQL_ROOT_PASSWORD=123 \
  -e MYSQL_DATABASE=users -e MYSQL_USER=users_service -e MYSQL_PASSWORD=123 \
  -p 3306:3306 \
  mysql:latest

# Wait for the database service to start up.
echo &amp;quot;Waiting for DB to start up...&amp;quot;  
docker exec db mysqladmin --silent --wait=30 -uusers_service -p123 ping || exit 1

# Run the setup script.
echo &amp;quot;Setting up initial data...&amp;quot;  
docker exec -i db mysql -uusers_service -p123 users &amp;lt; setup.sql  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个脚本在后台运行一个数据库映像，设置了一个可以访问&lt;code&gt;users&lt;/code&gt;数据库的用户，然后等数据库运行起来之后运行&lt;code&gt;setup.sql&lt;/code&gt;脚本设置初始的数据。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setup.sql&lt;/code&gt;里面：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;create table directory (user_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, email TEXT, phone_number TEXT);  
insert into directory (email, phone_number) values (&#39;homer@thesimpsons.com&#39;, &#39;+1 888 123 1111&#39;);  
insert into directory (email, phone_number) values (&#39;marge@thesimpsons.com&#39;, &#39;+1 888 123 1112&#39;);  
insert into directory (email, phone_number) values (&#39;maggie@thesimpsons.com&#39;, &#39;+1 888 123 1113&#39;);  
insert into directory (email, phone_number) values (&#39;lisa@thesimpsons.com&#39;, &#39;+1 888 123 1114&#39;);  
insert into directory (email, phone_number) values (&#39;bart@thesimpsons.com&#39;, &#39;+1 888 123 1115&#39;);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;stop.sh&lt;/code&gt;脚本会停止这个容器然后移除它(Docker默认会保留容器来为之后的启动加速，然而这个例子里面我们不用这个功能)：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

# Stop the db and remove the container.
docker stop db &amp;amp;&amp;amp; docker rm db  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们之后会把这些代码写的更聪明、更简洁。到这一步为止的代码在repo的&lt;a href=&#34;https://github.com/dwmkerr/node-docker-mircroservice/tree/step1&#34;&gt;step1&lt;/a&gt;分支上。&lt;/p&gt;

&lt;h2 id=&#34;第二步-用node-js创建一个微型服务&#34;&gt;第二步：用Node.js创建一个微型服务&lt;/h2&gt;

&lt;p&gt;这篇文章主要是将Docker的，所以我不会花很长时间说怎么在Node.js里写代码。我只会说说重点。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test-database/          # contains the code seen in Step 1  
users-service/          # root of our node.js microservice  
- package.json          # dependencies, metadata
- index.js              # main entrypoint of the app
- api/                  # our apis and api tests
- config/               # config for the app
- repository/           # abstraction over our db
- server/               # server setup code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们来一点一点看。要看的第一点是&lt;code&gt;repository&lt;/code&gt;。把访问数据库的过程抽象出来很有用，测试的时候也更便于模拟：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//  repository.js
//
//  Exposes a single function - &#39;connect&#39;, which returns
//  a connected repository. Call &#39;disconnect&#39; on this object when you&#39;re done.
&#39;use strict&#39;;

var mysql = require(&#39;mysql&#39;);

//  Class which holds an open connection to a repository
//  and exposes some simple functions for accessing data.
class Repository {  
  constructor(connection) {
    this.connection = connection;
  }

  getUsers() {
    return new Promise((resolve, reject) =&amp;gt; {

      this.connection.query(&#39;SELECT email, phone_number FROM directory&#39;, (err, results) =&amp;gt; {
        if(err) {
          return reject(new Error(&amp;quot;An error occured getting the users: &amp;quot; + err));
        }

        resolve((results || []).map((user) =&amp;gt; {
          return {
            email: user.email,
            phone_number: user.phone_number
          };
        }));
      });

    });
  }

  getUserByEmail(email) {

    return new Promise((resolve, reject) =&amp;gt; {

      //  Fetch the customer.
      this.connection.query(&#39;SELECT email, phone_number FROM directory WHERE email = ?&#39;, [email], (err, results) =&amp;gt; {

        if(err) {
          return reject(new Error(&amp;quot;An error occured getting the user: &amp;quot; + err));
        }

        if(results.length === 0) {
          resolve(undefined);
        } else {
          resolve({
            email: results[0].email,
            phone_number: results[0].phone_number
          });
        }

      });

    });
  }

  disconnect() {
    this.connection.end();
  }
}

//  One and only exported function, returns a connected repo.
module.exports.connect = (connectionSettings) =&amp;gt; {  
  return new Promise((resolve, reject) =&amp;gt; {
    if(!connectionSettings.host) throw new Error(&amp;quot;A host must be specified.&amp;quot;);
    if(!connectionSettings.user) throw new Error(&amp;quot;A user must be specified.&amp;quot;);
    if(!connectionSettings.password) throw new Error(&amp;quot;A password must be specified.&amp;quot;);
    if(!connectionSettings.port) throw new Error(&amp;quot;A port must be specified.&amp;quot;);

    resolve(new Repository(mysql.createConnection(connectionSettings)));
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;做这些肯定有更好的方法！但是基本上我们可以创建一个像这样的&lt;code&gt;Repository&lt;/code&gt;对象：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;repository.connect({  
  host: &amp;quot;127.0.0.1&amp;quot;,
  database: &amp;quot;users&amp;quot;,
  user: &amp;quot;users_service&amp;quot;,
  password: &amp;quot;123&amp;quot;,
  port: 3306
}).then((repo) =&amp;gt; {
  repo.getUsers().then(users) =&amp;gt; {
    console.log(users);
  });
  repo.getUserByEmail(&#39;homer@thesimpsons.com&#39;).then((user) =&amp;gt; {
    console.log(user);
  })
  //  ...when you are done...
  repo.disconnect();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;repository/repository.spec.js&lt;/code&gt;文件里有一些单元测试。我们现在有repo了就可以创建一个服务器。这是&lt;code&gt;server/server.js&lt;/code&gt;里面的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//  server.js

var express = require(&#39;express&#39;);  
var morgan = require(&#39;morgan&#39;);

module.exports.start = (options) =&amp;gt; {

  return new Promise((resolve, reject) =&amp;gt; {

    //  Make sure we have a repository and port provided.
    if(!options.repository) throw new Error(&amp;quot;A server must be started with a connected repository.&amp;quot;);
    if(!options.port) throw new Error(&amp;quot;A server must be started with a port.&amp;quot;);

    //  Create the app, add some logging.
    var app = express();
    app.use(morgan(&#39;dev&#39;));

    //  Add the APIs to the app.
    require(&#39;../api/users&#39;)(app, options);

    //  Start the app, creating a running server which we return.
    var server = app.listen(options.port, () =&amp;gt; {
      resolve(server);
    });

  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个模块抛出一个&lt;code&gt;start&lt;/code&gt;函数，我们可以这么调用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var server = require(&#39;./server/server);  
server.start({port: 8080, repo: repository}).then((svr) =&amp;gt; {  
  // we&#39;ve got a running http server :)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发现&lt;code&gt;server.js&lt;/code&gt;用到了&lt;code&gt;api/users.js&lt;/code&gt;？这是它的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//  users.js
//
//  Defines the users api. Add to a server by calling:
//  require(&#39;./users&#39;)
&#39;use strict&#39;;

//  Only export - adds the API to the app with the given options.
module.exports = (app, options) =&amp;gt; {

  app.get(&#39;/users&#39;, (req, res, next) =&amp;gt; {
    options.repository.getUsers().then((users) =&amp;gt; {
      res.status(200).send(users.map((user) =&amp;gt; { return {
          email: user.email,
          phoneNumber: user.phone_number
        };
      }));
    })
    .catch(next);
  });

  app.get(&#39;/search&#39;, (req, res) =&amp;gt; {

    //  Get the email.
    var email = req.query.email;
    if (!email) {
      throw new Error(&amp;quot;When searching for a user, the email must be specified, e.g: &#39;/search?email=homer@thesimpsons.com&#39;.&amp;quot;);
    }

    //  Get the user from the repo.
    options.repository.getUserByEmail(email).then((user) =&amp;gt; {

      if(!user) { 
        res.status(404).send(&#39;User not found.&#39;);
      } else {
        res.status(200).send({
          email: user.email,
          phoneNumber: user.phone_number
        });
      }
    })
    .catch(next);

  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在源代码里这些代码都有测试。&lt;/p&gt;

&lt;p&gt;我们需要有个配置文件。与其用一个库，用一个文件就可以了&lt;code&gt;config/config.js&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//  config.js
//
//  Simple application configuration. Extend as needed.
module.exports = {  
    port: process.env.PORT || 8123,
  db: {
    host: process.env.DATABASE_HOST || &#39;127.0.0.1&#39;,
    database: &#39;users&#39;,
    user: &#39;users_service&#39;,
    password: &#39;123&#39;,
    port: 3306
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以在需要的时候&lt;code&gt;require&lt;/code&gt;这个配置。现在，大部分的配置都是写死的，但是你可以从&lt;code&gt;port&lt;/code&gt;字段那里看到在配置里加入环境变量是很简单的。&lt;/p&gt;

&lt;p&gt;最后一步，在&lt;code&gt;index.js&lt;/code&gt;里面把多有的文件都串起来：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//    index.js
//
//  Entrypoint to the application. Opens a repository to the MySQL
//  server and starts the server.
var server = require(&#39;./server/server&#39;);  
var repository = require(&#39;./repository/repository&#39;);  
var config = require(&#39;./config/config&#39;);

//  Lots of verbose logging when we&#39;re starting up...
console.log(&amp;quot;--- Customer Service---&amp;quot;);  
console.log(&amp;quot;Connecting to customer repository...&amp;quot;);

//  Log unhandled exceptions.
process.on(&#39;uncaughtException&#39;, function(err) {  
  console.error(&#39;Unhandled Exception&#39;, err);
});
process.on(&#39;unhandledRejection&#39;, function(err, promise){  
  console.error(&#39;Unhandled Rejection&#39;, err);
});

repository.connect({  
  host: config.db.host,
  database: config.db.database,
  user: config.db.user,
  password: config.db.password,
  port: config.db.port
}).then((repo) =&amp;gt; {
  console.log(&amp;quot;Connected. Starting server...&amp;quot;);

  return server.start({
    port: config.port,
    repository: repo
  });

}).then((app) =&amp;gt; {
  console.log(&amp;quot;Server started successfully, running on port &amp;quot; + config.port + &amp;quot;.&amp;quot;);
  app.on(&#39;close&#39;, () =&amp;gt; {
    repository.disconnect();
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们做了一点错误处理，然后我们只是加载了配置，创建了一个repo启动服务器。&lt;/p&gt;

&lt;p&gt;这就是这个微型服务。它让我们可以获取所有用户的信息，或者搜索用户。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP GET /users                              # gets all users  
HTTP GET /search?email=homer@thesimpons.com  # searches by email 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你看了代码，你会发现已经准备好了一些命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ./users-service  
npm install         # setup everything  
npm test            # unit test - no need for a test database running  
npm start           # run the server - you must have a test database running  
npm run debug       # run the server in debug mode, opens a browser with the inspector  
npm run lint        # check to see if the code is beautiful  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除了代码，你发现我们还有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;为了debug用的Node Inspector&lt;/li&gt;
&lt;li&gt;Mocha/shoud/supertest 来做单元测试&lt;/li&gt;
&lt;li&gt;ESLint规范代码&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;就是这样！&lt;/p&gt;

&lt;p&gt;用下面的代码运行测试数据库：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd test-database/  
./start.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后用下面的代码运行服务：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ../users-service/  
npm start  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以用你的浏览器打开&lt;strong&gt;localhost:8123/users&lt;/strong&gt;来看看效果。如果你用Docker Machine(比如你在用Mac或者Windows)，那么&lt;code&gt;localhost&lt;/code&gt;不会起作用，你需要用Docker Machine的IP地址。你可以用&lt;code&gt;docker-machine ip&lt;/code&gt;命令来获取地址。&lt;/p&gt;

&lt;p&gt;我们花了一点点时间来快速构建这个服务。如果你想要看到现在的代码，请查看&lt;a href=&#34;https://github.com/dwmkerr/node-docker-mircroservice/tree/step2&#34;&gt;step2&lt;/a&gt;分支。&lt;/p&gt;

&lt;h2 id=&#34;第三步-docker我们的微型服务&#34;&gt;第三步：Docker我们的微型服务&lt;/h2&gt;

&lt;p&gt;好玩的来了！&lt;/p&gt;

&lt;p&gt;所以现在我们可以在一个测试容器中运行我们的微型服务了，只要它有一个可以兼容的版本的Node.js。我们想做的是设置好我们的服务然后基于它创建一个Docker映像，让我们可以在支持Docker的任何地方部署它。&lt;/p&gt;

&lt;p&gt;我们做这个方法是创建一个_Dockerfile_。一个Dockerfile是一个告诉Docker怎么创建映像的配方。我们在&lt;code&gt;users-service&lt;/code&gt;文件夹里面创建一个简单的Dockerfile，然后看看我们能怎么利用这个文件。&lt;/p&gt;

&lt;h3 id=&#34;创建一个dockerfile&#34;&gt;创建一个Dockerfile&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;users-service/&lt;/code&gt;创建一个叫&lt;code&gt;Dockerfile&lt;/code&gt;的文件，内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Use Node v4 as the base image.
FROM node:4

# Run node 
CMD [&amp;quot;node&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在运行下面的语句来构建映像，然后基于映像运行一个容器：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t node4 .    # Builds a new image  
docker run -it node4       # Run a container with this image, interactive  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们来看看构建命令先：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker build&lt;/code&gt;告诉Docker我们想要创建一个映像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t node4&lt;/code&gt;给这个映像打了一个&lt;code&gt;node4&lt;/code&gt;标签。现在开始我们就可以用这个标签引用它了。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;用当前目录来获取&lt;code&gt;Dockerfile&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;控制台输出一些东西之后你会看到我们有了一个新的映像。你可以用&lt;code&gt;docker images&lt;/code&gt;命令来查看所有映像。第二行命令看上去就很眼熟了：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt;命令会基于一个映像运行一个新的容器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-it&lt;/code&gt;表示使用交互命令行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node4&lt;/code&gt;是我们想要用的镜像的tag。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当我们运行这个映像的时候，我们会得到一个node REPL。查看当前版本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; process.version
&#39;v4.4.0&#39;  
&amp;gt; process.exit(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这和你当前计算机上的node版本应该不一样。&lt;/p&gt;

&lt;h3 id=&#34;分析dockerfile&#34;&gt;分析Dockerfile&lt;/h3&gt;

&lt;p&gt;查看dockerfile我们可以轻易的发现：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;FROM node:4&lt;/code&gt; 我们在Dockerfile里面做的第一件事就是指定基础映像。简单的google一下我们发现&lt;a href=&#34;https://hub.docker.com/_/node/&#34;&gt;node在docker hub上面的页面&lt;/a&gt;显示了所有可用的映像。基本上就是一个只装了node的ubuntu。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD [&amp;quot;node&amp;quot;]&lt;/code&gt; &lt;code&gt;CMD&lt;/code&gt; 命令告诉docker这个映像要运行node命令。当可执行的程序结束时，容器就关闭。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;再多加几行命令，我们就能让这个Dockerfile运行我们的服务。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Use Node v4 as the base image.
FROM node:4

# Add everything in the current directory to our image, in the &#39;app&#39; folder.
ADD . /app

# Install dependencies
RUN cd /app; \  
    npm install --production

# Expose our server port.
EXPOSE 8123

# Run our app.
CMD [&amp;quot;node&amp;quot;, &amp;quot;/app/index.js&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们在这里添加的就是用 &lt;code&gt;ADD&lt;/code&gt; 命令将当前文件夹下面的所有东西&lt;sup&gt;[1]&lt;/sup&gt;拷贝到了容器中的 &lt;code&gt;app/&lt;/code&gt; 文件夹里。然后我们用 &lt;code&gt;RUN&lt;/code&gt; 来在映像里执行一个安装包的命令。最后，我们 &lt;code&gt;EXPOSE&lt;/code&gt; 服务器端口，告诉docker我们想要在 &lt;code&gt;8123&lt;/code&gt; 端口监听连接，然后执行服务器代码。&lt;/p&gt;

&lt;p&gt;为了确保测试服务器可以运行，我们再次构件并运行这个映像：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t users-service .  
docker run -it -p 8123:8123 users-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你打开浏览器访问 &lt;code&gt;localhost:8123/users&lt;/code&gt; 你会看到一个错误信息。检查控制台会发现我们的容器在报告这个问题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--- Customer Service---
Connecting to customer repository...  
Connected. Starting server...  
Server started successfully, running on port 8123.  
GET /users 500 23.958 ms - 582  
Error: An error occured getting the users: Error: connect ECONNREFUSED 127.0.0.1:3306  
    at Query._callback (/app/repository/repository.js:21:25)
    at Query.Sequence.end (/app/node_modules/mysql/lib/protocol/sequences/Sequence.js:96:24)
    at /app/node_modules/mysql/lib/protocol/Protocol.js:399:18
    at Array.forEach (native)
    at /app/node_modules/mysql/lib/protocol/Protocol.js:398:13
    at nextTickCallbackWith0Args (node.js:420:9)
    at process._tickCallback (node.js:349:13)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;糟糕！你的 &lt;code&gt;users-service&lt;/code&gt; 容器与 &lt;code&gt;test-database&lt;/code&gt; 容器之间的连接被拒绝了。我们输入 &lt;code&gt;docker ps&lt;/code&gt; 命令来看看都有哪些容器运行着：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONTAINER ID  IMAGE          PORTS                   NAMES  
a97958850c66  users-service  0.0.0.0:8123-&amp;gt;8123/tcp  kickass_perlman  
47f91343db01  mysql:latest   0.0.0.0:3306-&amp;gt;3306/tcp  db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;两个容器都在运行，发生了什么？&lt;/p&gt;

&lt;h3 id=&#34;连接容器&#34;&gt;连接容器&lt;/h3&gt;

&lt;p&gt;其实这个错误并不出乎我们的预料。Docker容器就本应该是独立的，所以我们不明确指定的话是不能连接的。&lt;/p&gt;

&lt;p&gt;是的，我们可以从我们的计算机连接到容器，因为我们打开了端口(比如用 &lt;code&gt;-p 8123:8123&lt;/code&gt; 参数)。如果我们让容器之间也可以用这种方式，那么在同一台机器上的两个容器就可以沟通了。开发人员如果不想这样，那么这就是一个灾难性的设计。尤其是当我们有一个集群，它的任务就是在容器中运行不同的应用的时候。&lt;/p&gt;

&lt;p&gt;如果我们要从一个容器连接到另一个容器，我们需要_连接_它们，让docker知道我们明确的想让二者沟通。有两种方法可以做到，第一种有点&amp;rsquo;老套&amp;rsquo;但是很简单，第二种我们之后会见到。&lt;/p&gt;

&lt;h4 id=&#34;用-link-参数连接容器&#34;&gt;用&amp;rsquo;link&amp;rsquo;参数连接容器&lt;/h4&gt;

&lt;p&gt;当我们运行一个容器的时候，我们可以用 &lt;code&gt;link&lt;/code&gt; 参数告诉docker我们想要连接到另一个容器。在我们这个例子里，我们可以这样执行我们的服务：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -it -p 8123:8123 --link db:db -e DATABASE_HOST=DB users-service  
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker run -it&lt;/code&gt; 在容器里运行了一个docker映像，并且提供了交互式控制台。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p 8123:8123&lt;/code&gt; 将主机的8123端口映射到了容器的8123端口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link db:db&lt;/code&gt; 把容器连接到了&lt;code&gt;db&lt;/code&gt; 容器并且用 &lt;code&gt;db&lt;/code&gt; 引用它。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e DATABASE_HOST=db&lt;/code&gt; 设置 &lt;code&gt;db&lt;/code&gt; 中的环境变量 &lt;code&gt;DATABASE_HOST&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;users-service&lt;/code&gt; 容器中映像的名字。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在我们再打开 &lt;code&gt;localhost:8123/users&lt;/code&gt; ，一切都可以运行了。&lt;/p&gt;

&lt;h5 id=&#34;它是怎么工作的&#34;&gt;它是怎么工作的&lt;/h5&gt;

&lt;p&gt;还记得我们服务里的配置文件么？它让我们可以用环境变量来指定数据库的地址：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//  config.js
//
//  Simple application configuration. Extend as needed.
module.exports = {  
    port: process.env.PORT || 8123,
  db: {
    host: process.env.DATABASE_HOST || &#39;127.0.0.1&#39;,
    database: &#39;users&#39;,
    user: &#39;users_service&#39;,
    password: &#39;123&#39;,
    port: 3306
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当我们运行这个容器时，我们吧这个环境变量设置为 &lt;code&gt;DB&lt;/code&gt; ，表示我们在连接一个叫 &lt;code&gt;DB&lt;/code&gt; 的主机。这个连接时docker &lt;em&gt;自动&lt;/em&gt; 帮我们实现的。&lt;/p&gt;

&lt;p&gt;要真正证实这个行为，运行 &lt;code&gt;docker ps&lt;/code&gt; 来列出所有运行的容器。看运行 &lt;code&gt;users-service&lt;/code&gt; 映像的容器的名字，应该是个随机的名字比如 &lt;code&gt;trusting_jang&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps  
CONTAINER ID  IMAGE          ...   NAMES  
ac9449d3d552  users-service  ...   trusting_jang  
47f91343db01  mysql:latest   ...   db  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们来看容器里可用的主机：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker exec trusting_jang cat /etc/hosts  
127.0.0.1    localhost  
::1    localhost ip6-localhost ip6-loopback
fe00::0    ip6-localnet  
ff00::0    ip6-mcastprefix  
ff02::1    ip6-allnodes  
ff02::2    ip6-allrouters  
172.17.0.2    db 47f91343db01    # linking magic!!  
172.17.0.3    ac9449d3d552
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还记得 &lt;code&gt;docker exec&lt;/code&gt; 是怎么工作的么？选择一个容器的名字然后跟着的所有命令都是在容器中执行的，就像刚才我们 &lt;code&gt;cat /etc/hosts&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;好吧其实你看到的hosts文件里面没有 &lt;code&gt;# linking magic!!&lt;/code&gt; 这样的注释，我加上是为了让你看到docker修改了hosts文件让我们能够用 &lt;code&gt;db&lt;/code&gt; 引用到别的容器。这是连接之后的一个后果，另一个是这个：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker exec trusting_jang printenv | grep DB  
DB_PORT=tcp://172.17.0.2:3306  
DB_PORT_3306_TCP=tcp://172.17.0.2:3306  
DB_PORT_3306_TCP_ADDR=172.17.0.2  
DB_PORT_3306_TCP_PORT=3306  
DB_PORT_3306_TCP_PROTO=tcp  
DB_NAME=/trusting_jang/db  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用这个命令我们也可以发现当docker连接容器的时候，它同样会在环境变量里面提供一系列的有用的信息。我们知道了主机，tcp端口和容器的名字。&lt;/p&gt;

&lt;p&gt;第三步就做完了，我们现在有一个MySQL数据库运行在容器里，我们有一个node.js服务可以在本地或者容器里运行，并且我们知道了怎么把它们连接到一起。&lt;/p&gt;

&lt;p&gt;你在 &lt;a href=&#34;https://github.com/dwmkerr/node-docker-mircroservice/tree/step3&#34;&gt;step3&lt;/a&gt;分支里可以看这一步的代码。&lt;/p&gt;

&lt;h2 id=&#34;第四步-环境的集成测试&#34;&gt;第四步：环境的集成测试&lt;/h2&gt;

&lt;p&gt;现在我们就可以写一个集成测试来访问真实的服务器，运行docker容器并且访问容器中的测试数据库了。&lt;/p&gt;

&lt;p&gt;你可以用你喜欢的任何语言和平台来写集成测试，为了简单点，我就用Node.js里的Mocha和Supertest来写了。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;integration-tests&lt;/code&gt; 文件夹里，我们写一个 &lt;code&gt;index.js&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var supertest = require(&#39;supertest&#39;);  
var should = require(&#39;should&#39;);

describe(&#39;users-service&#39;, () =&amp;gt; {

  var api = supertest(&#39;http://localhost:8123&#39;);

  it(&#39;returns a 200 for a known user&#39;, (done) =&amp;gt; {

    api.get(&#39;/search?email=homer@thesimpsons.com&#39;)
      .expect(200, done);
  });

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会检查一个API的访问并且显示测试的结果。&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;只要你的 &lt;code&gt;users-service&lt;/code&gt; 和 &lt;code&gt;test-database&lt;/code&gt; 容器在运行，那么测试就会通过的。但是现在这些服务还是有点不太好处理：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;我们必须用脚本来启动和停止数据库。&lt;/li&gt;
&lt;li&gt;我们需要记住开启用户服务和数据库的命令顺序。&lt;/li&gt;
&lt;li&gt;我们需要直接用node运行集成测试。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在我们都更熟悉Docker了，我们能解决这些问题。&lt;/p&gt;

&lt;h3 id=&#34;简化测试数据库&#34;&gt;简化测试数据库&lt;/h3&gt;

&lt;p&gt;现在在测试数据库目录里有这些文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/test-database/start.sh
/test-database/stop.sh
/test-database/setup.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们都更熟悉Docker了，我们可以改进。阅读Docker Hub上面的&lt;a href=&#34;https://hub.docker.com/_/mysql/&#34;&gt;mysql映像文档&lt;/a&gt;我们发现，任何映像中&lt;code&gt;/docker-entrypoint-initdb.d&lt;/code&gt; 文件夹下的 &lt;code&gt;.sql&lt;/code&gt; 或者 &lt;code&gt;.sh&lt;/code&gt; 文件都会在设置数据库时执行。&lt;/p&gt;

&lt;p&gt;这表明我们可以把 &lt;code&gt;start.sh&lt;/code&gt; 和 &lt;code&gt;stop.sh&lt;/code&gt; 中的内容添加到 &lt;code&gt;Dockerfile&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM mysql:5

ENV MYSQL_ROOT_PASSWORD 123  
ENV MYSQL_DATABASE users  
ENV MYSQL_USER users_service  
ENV MYSQL_PASSWORD 123

ADD setup.sql /docker-entrypoint-initdb.d  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在运行测试数据库就变成了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t test-database
docker run --name db test-database
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;编纂&#34;&gt;编纂&lt;/h3&gt;

&lt;p&gt;现在创建并且运行容器还是要费点功夫的。我们可以更进一步，用&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;工具。&lt;/p&gt;

&lt;p&gt;Docker Compose让你可以只创建一个文件，就定义你系统里的所有容器，它们之间的关系并且构建运行他们。&lt;/p&gt;

&lt;p&gt;首先，&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;安装Docker Compose&lt;/a&gt;。现在在你项目的根目录创建一个 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: &#39;2&#39;  
services:  
  users-service:
    build: ./users-service
    ports:
     - &amp;quot;8123:8123&amp;quot;
    depends_on:
     - db
    environment:
     - DATABASE_HOST=db
  db:
    build: ./test-database
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在来运行这个：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose build
docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker Compose现在已经构建了我们应用所需的所有映像，也创建了容器，用正确的方式开启了他们，总之就是有条不紊！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker-compose build&lt;/code&gt; 命令构建了 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件中列出的所有映像。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yml&lt;/code&gt; 文件中的 &lt;code&gt;build&lt;/code&gt; 字段告诉了docker该去哪里找 &lt;code&gt;Dockerfile&lt;/code&gt;。当我们运行 &lt;code&gt;docker-compose up&lt;/code&gt; 的时候，docker会开启我们的所有服务。注意在 &lt;code&gt;Dockerfile&lt;/code&gt; 里面我们可以指定端口和依赖。实际上我们在这个文件里可以修改很多配置。&lt;/p&gt;

&lt;p&gt;在另一个终端里，可以运行 &lt;code&gt;docker compose down&lt;/code&gt; 来停掉所有的容器&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;在这篇文章里我们见识了很多docker的功能，但当然还有更多。我希望通过这篇文章，可以让你了解到在工作流里docker是多么的有帮助。你可以在&lt;a href=&#34;https://github.com/dwmkerr/node-docker-mircroservice&#34;&gt;这里&lt;/a&gt;看到这篇文章的所有代码。并且我也强烈推荐&lt;a href=&#34;https://docs.docker.com/engine/understanding-docker/&#34;&gt;这篇文档&lt;/a&gt;来更深入理解docker的原理。&lt;/p&gt;

&lt;h2 id=&#34;脚注&#34;&gt;脚注&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;拷贝所有的东西其实不是个好主意，因为我们也会把 node_modules 拷进去。更普遍的是明确列出哪些东西要拷贝，或者用 &lt;code&gt;.dockerignore&lt;/code&gt; 文件，就像 &lt;code&gt;.gitignore&lt;/code&gt; 文件一样。&lt;/li&gt;
&lt;li&gt;如果这个服务器没有在运行，它会显示一个招人烦的异常，是因为supertest里面的&lt;a href=&#34;https://github.com/visionmedia/supertest/issues/314&#34;&gt;一个bug&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>